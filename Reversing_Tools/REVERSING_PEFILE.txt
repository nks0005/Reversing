# PE File Format
 > PE [Portable Executable] 파일은 Windows 운영체제에서 사용되는 실행 파일 형식입니다.
  - 기존 UNIX에서 사용되는 COFF [Common Object File Format]를 기반으로 Microsoft에서 만들었습니다.

 > PE 파일은 32비트 형태의 실행 파일을 의미하여, PE32라는 용어를 사용하기도 합니다.
  - 64비트 형태의 실행 파일은 PE+또는 PE32+라고 부르며 PE[또는 PE32] 파일의 확장 형태입니다. 
   = PE64가 아닙니다.

 > PE 파일의 종류
  - 실행 계열 : EXE, SCR
  - 라이브러리 계열 : DLL, OCX, CPL, DRV
  - 드라이버 계열 : SYS, VXD
  - 오브젝트 파일 계열 : OBJ

 > OBJ[오브젝트] 파일을 제외하면 모든 것은 실행 가능한 파일입니다.
  - DLL, SYS 파일 등은 셸[Explorer.exe]에서 직접 실행할 수는 없지만, 다른 형태의 방법[디버거, 서비스, 기타]을 이용하여 실행이 가능한 파일입니다.

# PE 기본 구조 
 > DOS 헤더 ~ Section 헤더 : PE 헤더
 > 그 밑의 Section들 : PE 바디
  - 파일에서는 offset으로, 메모리에서는 VA[Virtual Address, 절대주소]로 위치를 표현합니다.
  - 파일이 메모리에 로딩되면 모양이 달라집니다. [Section의 크기, 위치 등]
   = 파일의 내용은 보통 코드[.text], 데이터[.data], 리소스[.rsrc] 섹션에 나뉘어서 저장됩니다.

 > 섹션 헤더[Section Header - PE Header]
  - 섹션 헤더에는 각 Section에 대한 파일/메모리에서의 크기, 위치, 속성 등이 정의되어 있습니다.
 
 > PE 헤더의 끝부분과 각 섹션의 끝에는 NULL padding이라고 불리는 영역이 존재합니다.
  - 컴퓨터에서 파일, 메모리, 네트워크 패킷 등을 처리할 때 효율을 높이기 위해 최소 기본 단위 개념을 사용하는데, PE 파일에도 같은 개념이 적용된 것입니다.
  - 파일/메모리에서 섹션의 시작 위치는 각 파일/메모리의 최소 기본 단위의 배수에 해당하는 위치여야하고, 빈 공간은 NULL로 채워버립니다.

# VA & RVA
 > VA[Virtual Address]는 프로세스 가상 메모리의 절대주소를 말합니다.
 > RAV[Relative Virtual Address]는 어느 기준 위치[ImageBase]에서부터의 상대주소를 말합니다.
  - RVA + ImageBase = VA

 > PE 헤더 내의 정보는 RVA 형태로 된 것이 많습니다.
  - 그 이유는 PE 파일[주로 DLL]이 프로세스 가상 메모리의 특정 위치에 로딩되는 순간, 이미 그 위치에 다른 PE 파일[DLL]이 로딩되어 있을 수 있습니다.
   = 그럴 때 재배치[Relocation] 과정을 통해서 비어 있는 다른 위치에 로딩되어야하는데, 만약 PE 헤더 정보들이 VA[Virtual Address, 절대주소]가 되어 있다면 정상적인 Access가 이루어지지 않을 것입니다.
   = 그러므로 정보를 RVA[Relatvie Virtual Address, 상대주소]로 해두면 Relocation이 발생해도 기준 위치에 대한 상대 주소가 변하지 않기 때문에 아무런 문제 없이 원하는 정보에 Access할 수 있는 것입니다.
