# 어셈블리 명령어
- INC ( Increase )
	피연산자에 1을 더한다. 연산 결과에 따라 ZF나 OF가 세트 될 수 있다.
		INC X

- DEC ( Decrease )
	피연산자에서 1을 빼는 명령이다. 연산 결과에 따라 ZF나 OF가 세트 될 수 있다.
		DEC X

- ADD ( Add )
	Destination에 Source의 값을 더해서 Destination에 저장하는 명령이다. 연산 결과에 따라서 ZF, OF, CF가 세트 될 수 있다.
		ADD Destination, Source

- SUB ( Subtract )
	Destinaton에 Source의 값을 빼서 Destination에 저장하는 명령이다. 연산 결과에 따라서 ZF, OF, CF가 세트(1) 될 수 있다.
		SUB Destination, Source

- MUL ( Multiply Unsigned Integer )
	부호 없는 al, ax, eax의 값을 피연산자와 곱한다. 피연산자가 8비트이면 al과 곱해서 ax에 저장되고, 16비트면 ax와 곱하고 dx:ax에 저장된다. 결과에 따라 OF, ZF가 세트(1) 될 수 있다.
		MUL EBX
			EBX는 EAX와 곱해짐
		MUL BX
			BX는 AX와 곱해짐

- IMUL ( Integer Multiplication )
	부호 있는 al, ax, eax의 값을 피연산자와 곱한다. 결과에 따라 CF, OF가 세트(1) 될 수 있다.
		IMUL EBX

		IMUL Destination, Value
			Value를 al, ax, eax와 곱해서 Destination에 저장한다.

		IMUL Destination, Value1, Value2
			Value1와 Value2를 곱한 값을 Destination에 저장한다.
				연산결과가 destination 레지스터의 크기보다 크다면 OF, CF가 세트(1) 된다.

- DIV ( Divide Unsigned Integer )
	8, 16, 32비트 부호 없는 정수의 나눗셈을 수행한다. 결과에 따라서 CF, OF, ZF가 세트(1) 될 수 있다.
		DIV X

- MOV ( Move )
	Source에서 Destination으로 데이터를 복사한다.
		MOV Destination, Source

- MOVS ( Move String )
	Source에서 Destination으로 데이터를 복사한다.
		MOVS Destination, Source

- MOVSB, MOVSW, MOVSD ( Move String )
	SI 또는 ESI 레지스터에 의해 지정된 메모리 주소의 내용을 DI 또는 EDI 레지스터에 의해 지정되는 메모리 주소로 복사한다.
	* MOVSB는 BYTE 단위로 복사
	* MOVSW는 WORD 단위로 복사
	* MOVSD는 DWORD 단위로 복사
		방향 플래그(DF)가 1로 세트 되어 있으면 ESI와 EDI는 복사 시에 감소하게 되고, DF가 0으로 세트 되어 있으면 ESI와 EDI는 복사 시에 증가하게 된다.

- MOVSX ( Move with Sign-Extended )
	BYTE나 WORD 크기의 피연산자를 WORD나 DWORD 크기로 확장하고 부호는 그대로 유지한다.
		MOVSX reg32, reg16
			큰 -> 작

- MOVZX ( Move with Zero-Extended )
	BYTE나 WORD 크기의 피연산자를 WORD나 DWORD 크기로 확장하고 남은 비트는 0으로 채운다.
		MOVZX reg32, reg16

- INT ( Interrupt )
	소프트웨어 인터럽트를 발생시켜 운영체제의 서브루틴을 호출한다.
		INT 3

- AND ( Logical AND )
	Destination과 Source 피연산자의 각 비트가 AND 연산된다. AND 연산을 통해서 OF, CF가 0으로 세트(1) 되고, 결과에 따라서 ZF가 세트(1) 될 수 있다.
		AND reg, reg

- OR ( Inclusive OR )
	Destination과 Source 피연산자의 각 비트가 XOR 연산된다. XOR 연산을 통해서 OF, CF가 해체(0) 되고, 결과에 따라서 ZF가 세트(1) 될 수 있다. 피연산자의 두 값이 같은 값이라면 결과는 항상 0이 된다.
		레지스터를 0으로 초기화 시킬 때 MOV 명령어를 사용하기보다는 XOR reg, reg로 많이 사용함.
		XOR EAX, EAX
			EAX를 0으로 초기화 ( MOV EAX, 0 )

- XOR ( Exclusive OR )
	Destination과 Source 피연산자의 각 비트가 XOR 연산된다. XOR 연산을 통해서 OF, CF가 0으로 세트되고 결과에 따라서 ZF가 1로 세트 될 수 있다. 피연산자의 두 값이 같은 값이면 결과는 항상 0이 된다.
		레지스터를 0으로 초기화 시킬 때 MOV 명령어를 사용하기보다는 XOR reg, reg로 많이 사용한다.
			XOR reg, reg

- TEST ( Test )
	두 피연산자 사이에 논리적인 AND 연산을 수행하여 플래그 레지스터에 영향을 주지만 결과값은 저장하지 않는다. OF, CF는 항상 0으로 세트 되고 TEST 연산 결과값이 0이면 ZF가 1로 세트, 0이 아니면 ZF가 0으로 세트 된다.
		TEST reg, reg

- STC ( Set Carry Flag )
	캐리 플래그(CF)를 세트(1) 한다.
- CLC ( Clear Carray Flag )
	캐리 플래그(CF)를 해제(0) 한다.

- STD ( Set Direction Flag ) 
	방향 플래그(DF)를 세트(1) 한다.
- CTD ( Clear Direction Flag )
	방향 플래그(DF)를 해제(0) 한다.

- STI ( Set Interrupt Flag )
	인터럽트 플래그(IF)를 세트(1) 한다.
- CLI ( Clear Interrupt Flag )
	인터럽트 플래그(IF)를 해제(0) 한다.

- SHL ( Shift Left )
	Destination 피연산자를 Source 피연산자의 크기만큼 왼쪽으로 각 비트를 시프트 시킨다. 최상위 비트는 캐리 플래그(CF)로 복사되고, 최하위 비트는 0으로 채워진다.
		SHL Destination, Source
- SHR ( Shift Right )
	Destination 피연산자를 Source 피연산자의 크기만큼 오른쪽으로 각 비트를 시프트 시킨다. 최상위 비트는 0으로 채워지고, 최하위 비트는 캐리 플래그(CF)로 복사된다.
		SHR Destination, Source
		
- PUSH ( Push on Stack ) 
	스택에 값을 넣는다. ESP의 값이 4만큼 줄어들고 이 위치에 새로운 값이 채워진다.
		PUSH X
- PUSHAD ( Push All )
	EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP 레지스터의 값에 스택을 PUSH한다. 레지스터의 값에 보관해야 할 필요가 있을 때 사용한다.
		PUSHAD

- POP ( Pop from Stack )
	ESP 레지스터가 가리키고 있는 위치의 스택 공간에서 4Byte 만큼을 Destination 피연산자에 복사하고 ESP 레지스터의 값에 4를 더한다.
		POP	X
- POPAD ( Pop All from Stack )
	스택에 존재하는 값을 플래그 레지스터로 POP한다. PUSHAD 명령어로 스택에 보관해 놓은 레지스터 정보를 다시 이용하려고 할 때 사용한다.
		POPAD 	

- XCHG ( Exchange )
	두 피연산자 내용이 서로 교환된다. XCHG 명령은 imm 값이 피연산자로 올 수 없다.
		XCHG X, Y

- NEG ( Negate )
	피연산자의 2의 보수를 계산하여 결과를 피연산자에 저장한다.
		NEG X

- PTR
	피연산자의 크기를 재설정한다.
		MOV EAX, DWORD PTR value
			위의 명령어는 value의 크기를 DWORD 크기로 재설정하여 EAX 레지스터에 복사하라는 의미이다.

- OFFSET
	세그먼트의 시작으로부터 변수가 위치한 거리까지의 상대적 거리를 리턴한다.
		MOV ESI, OFFSET value
			위 명령어는 value가 존재하는 위치를 세그먼트 시작 지점으로부터의 상대적 거리로 구해서 ESI 레지스터에 복사하라는 의미이다.

- LEA ( Load Effective Address )
	Source 피연산자의 유효 주소를 계산하여 Destination 피연산자에 복사한다. 간단히 주소를 알아내서 복사하는 명령어라고 생각하면 된다.
		LEA X, Y

- REP ( Repeat String )
	ECX 레지스터를 카운터로 사용해서 문자열 관련 명령을 ECX > 0인 동안 반복한다
		EP MOVS Destination, Source

- JMP ( Jump Unconditionally to Label )
	피연산자의 위치로 실행 흐름이 변경된다. 피연산자가 가리키는 코드로 점프해서 실행한다고 생각하면 된다. 피연산자에는 레이블이나 레지스터, 메모리 값이 올 수 있다.
		short 점프는 -127~127바이트 범위 안에서 사용되고, near 점프는 같은 세그먼트 내부에서 사용된다. far 점프는 현재 세그먼트를 벗어날 때 사용되며 JMP 명령어는 되돌아올 리턴 어드레스 값을 저장하지 않는다. 이 명령어는 무조건 점프 명령어인데 점프 명령은 어떤 형식에 맞을 때만 점프하는 조건 형식의 점프 명령도 있다.
			JMP X

- CALL ( Call a Procedure )
	함수 호출 시 사용된다. JMP 명령어 같이 프로그램의 실행 흐름이 변경되지만, JMP 명령어와 다른 점은 되돌아올 리턴 어드레스 ( CALL 다음 명령 )를 스택에 저장한다는 것이다. 되돌아올 주소를 저장하기 때문에 함수 호출 후 원래 위치로 실행 흐름을 되돌릴 수 있다.	
		Call 함수 주소
		Call DWORD PTR[EAX+5]
		Call <Jmp to API> 특정 api 지목

- CMP ( Compare )
	두 피연산자를 비교하는 작업을 한다. Destination 피연산자에서 Source 피연산자를 묵시적으로 빼서 값을 비교한다.
		두 피연산자의 값이 같다면 결과는 0이 되고 제로 플래그(ZF)가 세트(1) 된다. 다르다면 ZF는 해제(0) 된다.
			CMP Destination, Source

- NOP ( No Operation )
	아무 일도 하지 않는 명령어이다. 리버싱 작업에서 목적에 따라 유용하게 사용될 수 있다.

	
# 조건 점프 명령

	조건 점프 명령은 JMP 명령어와는 다르게 CMP 명령 같이 특정 플래그 레지스터를 변경시킬 수 있는 명령어를 통해서 특정 조건이 만족하게 된다면 점프를 수행하게 되는 명령어이다. 명령어 자체가 처음 볼 땐 어떤 일을 하는지 이해하기가 힘들게 되어 있다. 다음에 여러 조건 형식의 점프 명령과 명령의 의미, 그리고 어떤 조건(플래그 레지스터의 상태)을 만족해야 명령어가 수행되는지 표로 정리하였다.

 
		
명령어		명령어의 의미							명령어가 수행되기 의한 플래그 레지스터와 범용 레지스터의 상태

JA			Jump if (unsigned) above				CF=0 and ZF=0
JAE			Jump if (unsigned) above or equal		CF=0
JB			Jump if (unsigned) below				CF=1
JBE			Jump if (unsigned) below or equal		CF=1 or ZF=1
JC			Jump if carry flag set					CF=1
JCXZ		Jump if CX is 0							CX=0
JE			Jump if equal							ZF=1
JECXZ		Jump if ECX is 0						ECX=0
JG			Jump if (signed) greater				ZF=0 and SF=0
JGE			Jump if (signed) greater or equal		SF=OF
JL			Jump if (signed) less					SF!=OF
JLE			Jump if (signed) less or equal			ZF=1 and SF!=OF
JNA			Jump if (unsigned) not above			CF=1 or ZF=1
JNAE		Jump if (unsigned) not above or equalCF=1
JNB			Jump if (unsigned) not below			CF=0
JNBE		Jump if (unsigned) not below or equal	CF=0 and ZF=0
JNC			Jump if carry flag not set				CF=0
JNE			Jump if not equal						ZF=0
JNG			Jump if (signed) not greater			ZF=1 or SF!=OF
JNGE		Jump if (signed) not greater or equal	SF!=OF
JNL			Jump if (signed) not less				SF=OF
JNLE		Jump if (signed) not less or equal		ZF=0 and SF=OF
JNO			Jump if overflow flag not set			OF=0
JNP			Jump if parity flag not set				PF=0
JNS			Jump if sign flag not set				SF=0
JNZ			Jump if not zero						ZF=0
JO			Jump if overflow flag is set			OF=1
JP			Jump if parity flag set					PF=1
JPE			Jump if parity is equal					PF=1
JPO			Jump if parity is odd					PF=0
JS			Jump if sign flag is set				SF=1
JZ			Jump if zero flag is set				ZF=1